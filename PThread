#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define MAX 4  // Define the size of the matrices (4x4 for example)

int matA[MAX][MAX];
int matB[MAX][MAX];
int matC[MAX][MAX];

// Structure to pass data to threads
typedef struct {
    int row;
    int col;
} MatrixCell;

void *multiply(void *arg) {
    MatrixCell *cell = (MatrixCell *)arg;
    int sum = 0;

    for (int k = 0; k < MAX; k++) {
        sum += matA[cell->row][k] * matB[k][cell->col];
    }

    matC[cell->row][cell->col] = sum;
    pthread_exit(0);
}

int main() {
    pthread_t threads[MAX][MAX];
    MatrixCell cell[MAX][MAX];

    // Initialize matrices matA and matB with some values
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < MAX; j++) {
            matA[i][j] = i + j;
            matB[i][j] = i * j;
        }
    }

    // Create threads for matrix multiplication
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < MAX; j++) {
            cell[i][j].row = i;
            cell[i][j].col = j;
            pthread_create(&threads[i][j], NULL, multiply, &cell[i][j]);
        }
    }

    // Wait for all threads to finish
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < MAX; j++) {
            pthread_join(threads[i][j], NULL);
        }
    }

    // Print the result matrix matC
    printf("Result matrix:\n");
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < MAX; j++) {
            printf("%d ", matC[i][j]);
        }
        printf("\n");
    }

    return 0;
}
